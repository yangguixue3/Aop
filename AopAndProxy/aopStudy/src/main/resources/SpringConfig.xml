<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">


        <!--
            AOP的配置 :
                1.配置增强功能的对象 :  打印logger
                2.使用 aop:config 开始AOP的配置，
                3.使用 aop:aspect 开始切面的配置，
                4.在aop:aspect标签内部,  来配置通知的类型
                        aop:before 标签 : 前置通知　
                            method : 指定前置通知的函数 ===>通知的类’
                            pointcut : 用于指明切入点的表达式
                             <aop:before %前置通知% method="printLog" % 通知想要用的 增强方法% pointcut="execution(%被增强的方法，类%)"></aop:before>
                        切入点的表达式 :
                            位置 : pointcut的属性值
                                execution()
                            标准格式 :
                                修饰符  返回值类型  包名.包名.类名.函数名(参数列表)
                                public void com.msr.service.impl.AccountServiceImpl.insertAccount()
                            AOP表达式的写法 :
                                全通配写法 :        * *..*.*(..)
                                标准格式 :
        -->
                <!--<aop:before method="printLog" pointcut="execution(public void com.msr.service.impl.AccountServiceImpl.insertAccount())"></aop:before>-->
                <!--全通配写法-->
                <!--<aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>-->
                <!--修饰符可以省略-->
                <!--<aop:before method="printLog" pointcut="execution(void com.msr.service.impl.AccountServiceImpl.insertAccount())"></aop:before>-->
                <!--返回值可以使用通配符来取代-->
                <!--<aop:before method="printLog" pointcut="execution(* com.msr.service.impl.AccountServiceImpl.insertAccount())"></aop:before>-->
                <!--
                    包名也可以使用通配符取代,但是有几个包就要写几个 *.
                    可以使用   .  代表当前包和它的子包
                 -->
                <!--<aop:before method="printLog" pointcut="execution(* *..AccountServiceImpl.insertAccount())"></aop:before>-->
                <!--类名和函数名也可以使用 * 取代 -->
                <!--<aop:before method="printLog" pointcut="execution(* *..*.*())"></aop:before>-->
                <!--
                    参数列表也可以使用通配符来取代
                        *   :  代表任意参数类型,但是必须有参数

                    ..  : 代表任意参数类型,参数可有可无

                        参数的数据类型 :
                            引用数据类型 : 全限定名  java.lang.Integer
                            基本数据类型 : int
                -->
<!--                <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>-->
                  <!--  <aop:before method="printLog" pointcut="execution(* *..*.*(int))"></aop:before>-->
                <!--
                    开发中切入点表达式通常的写法 :
                        切到业务层实现类下所有方法 :
                        * com.msr.service.impl.*.*(..)
                -->

    <!--
        ===>切面是: 要增强功能
        ===>切入点: 被增强的方法。类
        ===>通知的类型: 　增强功能在被增强的类或方法的 位置，前置后置等
        ===>通知的类型: 　
-->

        <!--配置业务层bean-->
        <bean id="accountService" class="com.msr.service.impl.AccountServiceImpl"></bean>
        <!--配置增强类的bean-->
        <bean id="logger" class="com.msr.unit.Logger"></bean>
        <!--AOP的配置-->
        <aop:config>
            <!--切面的配置-->
            <aop:aspect id="logAdvice" ref="logger">
                <!-- 在 aop:config 标签内部：通知和切入点表达式的关系 -->
                <!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="pt1"/>-->
                <!--配置通知的类型,并且建立通知方法和切入点方法的 关联-->
                <aop:before method="printLog" pointcut="execution(* com.msr.service.impl.*.*(..))"></aop:before>
            </aop:aspect>
        </aop:config>
</beans>